#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include "esp_wpa2.h" //wpa2 library for connections to Enterprise networks

//
//WIFI CONNECTIVITY
//

// Eduroam network credentials
const char* ssid = "eduroam";
const char* password = "REPLACE_WITH_YOUR_PASSWORD";
#define EAP_IDENTITY "YOUR USERNAME" //nickname@example.com, at some organizations should work nickname only without realm, but it is not recommended
#define EAP_PASSWORD "YOUR PASSWORD" //password for eduroam account


const char* PARAM_INPUT_1 = "output";
const char* PARAM_INPUT_2 = "state";

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// Create an Event Source on /events
AsyncEventSource events("/events");

// Timer variables
unsigned long lastTime = 0;  
unsigned long timerDelay = 1000;

//
//SENSORS
//

#define DOOR_SENSOR_PIN  32  // ESP32 pin GIOP19 connected to door sensor's pin
#define MOTION_SENSOR_PIN  27  // ESP27 pin GIOP19 connected to motion sensor's pin

int doorState;
int doorStateCurrent  = LOW; // current  state of door sensor's pin
int doorStatePrevious = LOW; // previous state of door sensor's pin

int motionStateCurrent  = LOW; // current  state of motion sensor's pin
int motionStatePrevious = LOW; // previous state of motion sensor's pin

int SystemState = 0;

void getSensorReadings(){
  doorStatePrevious = doorStateCurrent;             // store old state
  doorStateCurrent  = digitalRead(DOOR_SENSOR_PIN); // read new state      
  //motion sensor
  motionStatePrevious = motionStateCurrent;             // store old state
  motionStateCurrent  = digitalRead(MOTION_SENSOR_PIN); // read new state    
}

void sendEvents(){
    if((doorStateCurrent == LOW) && (doorStatePrevious == HIGH) && SystemState)
    {events.send("Door closed","doorStateCurrent",millis());}
    else if ((doorStateCurrent == HIGH) && (doorStatePrevious == LOW) && SystemState){events.send("Door opened","doorStateCurrent",millis());}
    else if((doorStateCurrent == LOW) ){events.send("Door is closed","doorStateCurrentNoSys",millis());}
    else if(doorStateCurrent == HIGH){events.send("Door is open","doorStateCurrentNoSys",millis());}

    if((motionStateCurrent == LOW) && (motionStatePrevious == HIGH)&& SystemState)
    {events.send("Motion stopped.","motionStateCurrent",millis());}
    else if((motionStateCurrent ==   HIGH) && (motionStatePrevious == LOW)&& SystemState){events.send("Motion detected","motionStateCurrent",millis());}
    else if((motionStateCurrent == LOW) && (motionStatePrevious == LOW)){events.send("No motion detected","motionStateCurrentNoSys",millis());}
    else if((motionStateCurrent == HIGH)&& (motionStatePrevious == HIGH)){events.send("Motion detected!","motionStateCurrentNoSys",millis());};
}


const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <title>ESP Web Server</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="data:,">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center;}
    h2 {font-size: 3.0rem;}
    p {font-size: 1.2rem;}
    body {margin:0px auto; padding-bottom: 25px;}
    .topnav { overflow: hidden; background-color: #50B8B4; color: white; font-size: 1rem; }
    .content { padding: 20px; }
    .card { background-color: white; box-shadow: 2px 2px 12px 1px rgba(140,140,140,.5); }
    .cards { max-width: 800px; margin: 0 auto; display: grid; grid-gap: 2rem; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); }
    .reading { font-size: 1.4rem; }
    .logg {padding:5%;}
    .switch {position: relative; display: inline-block; width: 120px; height: 68px} 
    .switch input {display: none}
    .slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; border-radius: 6px}
    .slider:before {position: absolute; content: ""; height: 52px; width: 52px; left: 8px; bottom: 8px; background-color: white; -webkit-transition: .4s; transition: .4s; border-radius: 3px}
    input:checked+.slider {background-color: green}
    input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px)}
  </style>
</head>
<body>
  <div class="topnav">
  <h1>HOME STATUS</h1>
  </div>
  <div class="content">
    <div class="cards">
      <div class="card">
        <p><i class="fas fa-door-open" style="color:#059e8a;"></i> DOOR SENSOR</p><p><span class="reading"><span id="door"></span></p>
      </div>
      <div class="card">
        <p><i class="fas fa-wifi" style="color:#00add6;"></i> MOTION SENSOR</p><p><span class="reading"><span id="motion"></span></p>
      </div><div><h4>Turn system on and off</h4><label class="switch"><input type="checkbox" onchange="toggleCheckbox(this)" id="2"><span class="slider"></span></label>
      </div>
      </div>
    </div>
    <div class="logg"><span id="log"> <h3>Sensor Triggered History </h3></span></div>
  </div>

<script>function toggleCheckbox(element) {
  var xhr = new XMLHttpRequest();
  if(element.checked){ xhr.open("GET", "/update?output="+element.id+"&state=1", true); }
  else { xhr.open("GET", "/update?output="+element.id+"&state=0", true); }
  xhr.send();
 }
if (!!window.EventSource) {
 var source = new EventSource('/events');
 source.addEventListener('open', function(e) {
  console.log("Events Connected");
 }, false);
 source.addEventListener('error', function(e) {
  if (e.target.readyState != EventSource.OPEN) {
    console.log("Events Disconnected");
  }
 }, false);
 
 source.addEventListener('message', function(e) {
  console.log("message", e.data);
 }, false);

  source.addEventListener('doorStateCurrentNoSys', function(e) {
  document.getElementById("door").innerHTML = e.data;
  }, false);
  source.addEventListener('motionStateCurrentNoSys', function(e) {
  document.getElementById("motion").innerHTML = e.data;
  }, false);
  
  source.addEventListener('doorStateCurrent', function(e) {
  document.getElementById("door").innerHTML = e.data;
  var date = new Date();
  var strdate = date.toDateString();
  var time = date.toLocaleTimeString();document.getElementById("log").innerHTML += (e.data + " on " + strdate + " at " + time + "<br>");  console.log("doorStateCurrent", e.data);
 }, false);
 
 source.addEventListener('motionStateCurrent', function(e) {
  document.getElementById("motion").innerHTML = e.data;
  var date = new Date();
  var strdate = date.toDateString();
  var time = date.toLocaleTimeString();document.getElementById("log").innerHTML += (e.data + " on " + strdate + " at " + time + "<br>");  console.log("motionStateCurrent", e.data);
 }, false);
}
</script>
</body>
</html>
)rawliteral";

void setup(){
  //SENSOR SETUP
  Serial.begin(9600);                    // initialize serial
  pinMode(DOOR_SENSOR_PIN, INPUT_PULLUP); // set ESP32 pin to input pull-up mode
  pinMode(MOTION_SENSOR_PIN, INPUT_PULLUP); // set ESP32 pin to input pull-up mode
  pinMode(2,OUTPUT);
  digitalWrite(2,LOW);

  // Connect to Wi-Fi
   //WIFI SETUP
   WiFi.mode(WIFI_STA); //init wifi mode
   esp_wifi_sta_wpa2_ent_set_username((uint8_t *)EAP_IDENTITY, strlen(EAP_IDENTITY));
   esp_wifi_sta_wpa2_ent_set_password((uint8_t *)EAP_PASSWORD, strlen(EAP_PASSWORD));
   esp_wifi_sta_wpa2_ent_enable();
   WiFi.begin(ssid); //connect to wifi
   while (WiFi.status() != WL_CONNECTED) {
     delay(500);
     Serial.print(".");
   }
   // Print local IP address and start web server
   Serial.println("");
   Serial.println("WiFi connected.");
   Serial.println("IP address: ");
   Serial.println(WiFi.localIP());
   server.begin();

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
  });

  // Send a GET request to <ESP_IP>/update?output=<inputMessage1>&state=<inputMessage2>
  server.on("/update", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage1;
    String inputMessage2;
    // GET input1 value on <ESP_IP>/update?output=<inputMessage1>&state=<inputMessage2>
    if (request->hasParam(PARAM_INPUT_1) && request->hasParam(PARAM_INPUT_2)) {
      inputMessage1 = request->getParam(PARAM_INPUT_1)->value();
      inputMessage2 = request->getParam(PARAM_INPUT_2)->value();
      SystemState = inputMessage2.toInt();
      digitalWrite(inputMessage1.toInt(), inputMessage2.toInt());
    }
    else {
      inputMessage1 = "No message sent";
      inputMessage2 = "No message sent";
    }
    request->send(200, "text/plain", "OK");
  });
  // Start server
  server.addHandler(&events);
  server.begin();
}

void loop() {
  if ((millis() - lastTime) > timerDelay) {
    getSensorReadings();
    // Send Events to the Web Server with the Sensor Readings
    sendEvents();
    lastTime = millis();
  }}
