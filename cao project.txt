#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include "time.h"
#include "SPIFFS.h"
#include "esp_wpa2.h" //wpa2 library for connections to Enterprise networks

//
//WIFI CONNECTIVITY
//

// Eduroam network credentials
const char* ssid = "eduroam";
const char* password = "REPLACE_WITH_YOUR_PASSWORD";
#define EAP_IDENTITY "fahsan.bscs20seecs" //nickname@example.com, at some organizations should work nickname only without realm, but it is not recommended
#define EAP_PASSWORD "Chocobulb1!" //password for eduroam account

AsyncWebServer server(80);
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 10;//GMT+5 for Pakistan
const int   daylightOffset_sec = 0;

// Create an Event Source on /events
AsyncEventSource events("/events");

// Timer variables
unsigned long lastTime = 0;  
unsigned long timerDelay = 1000;
//
//SENSORS
//

#define DOOR_SENSOR_PIN  32  // ESP32 pin GIOP19 connected to door sensor's pin
#define MOTION_SENSOR_PIN  27  // ESP27 pin GIOP19 connected to motion sensor's pin
String History = "";
int doorState;
int doorStateCurrent  = LOW; // current  state of door sensor's pin
int doorStatePrevious = LOW; // previous state of door sensor's pin

int motionStateCurrent  = LOW; // current  state of motion sensor's pin
int motionStatePrevious = LOW; // previous state of motion sensor's pin

void getSensorReadings(){
  doorStatePrevious = doorStateCurrent;             // store old state
  doorStateCurrent  = digitalRead(DOOR_SENSOR_PIN); // read new state      
  //motion sensor
  motionStatePrevious = motionStateCurrent;             // store old state
  motionStateCurrent  = digitalRead(MOTION_SENSOR_PIN); // read new state    
  // vibration sensor having sensitiivty regulated by 47 k resister and 22k resistor in series
  // Serial.println(analogRead(25));
  delay(2);

}

// Initialize WiFi
void initWiFi() {
    //WIFI SETUP
   WiFi.mode(WIFI_STA); //init wifi mode
   esp_wifi_sta_wpa2_ent_set_username((uint8_t *)EAP_IDENTITY, strlen(EAP_IDENTITY));
   esp_wifi_sta_wpa2_ent_set_password((uint8_t *)EAP_PASSWORD, strlen(EAP_PASSWORD));
   esp_wifi_sta_wpa2_ent_enable();
   WiFi.begin(ssid); //connect to wifi
   while (WiFi.status() != WL_CONNECTED) {
     delay(500);
     Serial.print(".");
   }
   // Print local IP address and start web server
   Serial.println("");
   Serial.println("WiFi connected.");
   Serial.println("IP address: ");
   Serial.print("http://");
   Serial.print(WiFi.localIP());
   Serial.print("/html");
   server.begin();
}

void saveTriggerTime(String action){
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return;
  }
  char timeHour[3];
  strftime(timeHour,3, "%H", &timeinfo);
  char timeMin[3];
  strftime(timeHour,3, "%M", &timeinfo);
  char timeWeekDay[10];
  strftime(timeWeekDay,10, "%A", &timeinfo);
  History += " " + action +  " on " + timeWeekDay + " at " +timeHour + ":" + timeMin + "\n";
  Serial.println(History);
}


void sendEvents(){
   events.send("ping",NULL,millis());
    if(doorStateCurrent == LOW && doorStatePrevious == HIGH)
    {events.send("Door closed","doorStateCurrent",millis());saveTriggerTime("Door closed ");}
    else if (doorStateCurrent == HIGH && doorStatePrevious == LOW){events.send("Door opened","doorStateCurrent",millis());saveTriggerTime("Door open ");}
    else if(doorStateCurrent == LOW){events.send("Door is closed","doorStateCurrent",millis());}
    else if(doorStateCurrent == HIGH){events.send("Door is open","doorStateCurrent",millis());}

    if(motionStateCurrent == LOW && motionStatePrevious == HIGH)
    {events.send("Motion stopped.","motionStateCurrent",millis());Serial.println();saveTriggerTime("Motion stopped ");}
    else if(motionStateCurrent ==   HIGH && motionStatePrevious == LOW){
      events.send("Motion detected!","motionStateCurrent",millis());Serial.println();saveTriggerTime("Motion detected ");}
    else if(motionStateCurrent == LOW){events.send("No motion detected","motionStateCurrent",millis());}
}
void setup() {
  //SENSOR SETUP
  Serial.begin(9600);                    // initialize serial
  pinMode(DOOR_SENSOR_PIN, INPUT_PULLUP); // set ESP32 pin to input pull-up mode
  pinMode(MOTION_SENSOR_PIN, INPUT_PULLUP); // set ESP32 pin to input pull-up mode
  if(!SPIFFS.begin()){
          Serial.println("An Error has occurred while mounting SPIFFS");
          return;
    }
   
  initWiFi();
  // Handle Web Server
  server.on("/html", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/code.html", "text/html");
  });

  // Handle Web Server Events
  events.onConnect([](AsyncEventSourceClient *client){
    if(client->lastId()){
      Serial.printf("Client reconnected! Last message ID that it got is: %u\n", client->lastId());
    }
    // send event with message "hello!", id current millis and set reconnect delay to 1 second
    client->send("hello!", NULL, millis(), 10000);
  });
  server.addHandler(&events);
  server.begin();

   //TIME SETUP FOR HISTORY 
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
}

void loop() {
  if ((millis() - lastTime) > timerDelay) {
    getSensorReadings();
    // Send Events to the Web Server with the Sensor Readings
    sendEvents();
    lastTime = millis();
  }}
